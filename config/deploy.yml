# Name of your application. Used to uniquely configure containers.
service: wave

# Name of the container image. Change ronald2wing to your username
image: ronald2wing/wave

# Deploy to these servers.
servers:
  cron:
    cmd: php /var/www/html/artisan schedule:work
    hosts:
      - <%= ENV['SSH_HOST'] %>
    options:
      health-cmd: pgrep -f "php artisan schedule:work" || exit 1
      network: private
  web:
    hosts:
      - <%= ENV['SSH_HOST'] %>
    options:
      network: private
  # job:
  #   hosts:
  #     - 192.168.0.1
  #   cmd: bin/jobs

# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
# Remove this section when using multiple web servers and ensure you terminate SSL at your load balancer.
#
# Note: If using Cloudflare, set encryption mode in SSL/TLS setting to "Full" to enable CF-to-app encryption.
proxy:
  app_port: 8080
  host: <%= ENV['PROD_HOST'] %>
  ssl: true
  # Proxy connects to your container on port 80 by default.
  # app_port: 3000

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  # Change ronald2wing to your username
  username: ronald2wing

  # Always use an access token rather than real password (pulled from .kamal/secrets).
  password:
    - KAMAL_REGISTRY_PASSWORD

# Configure builder setup.
builder:
  arch: amd64
  # Pass in additional build args needed for your Dockerfile.
  # args:
  #   RUBY_VERSION: <%= ENV["RBENV_VERSION"] || ENV["rvm_ruby_string"] || "#{RUBY_ENGINE}-#{RUBY_ENGINE_VERSION}" %>

# Inject ENV variables into containers (secrets come from .kamal/secrets).
#
# env:
#   clear:
#     DB_HOST: 192.168.0.2
#   secret:
#     - RAILS_MASTER_KEY
env:
  clear:
    APP_DEBUG: false
    APP_ENV: production
    APP_NAME: Wave
    APP_URL: https://<%= ENV['PROD_HOST'] %>
    DB_CONNECTION: mysql
    DB_DATABASE: wave_production
    DB_HOST: wave-db
    DB_USERNAME: wave
    REDIS_HOST: wave-redis
    SESSION_DRIVER: redis
  secret:
    - APP_KEY
    - DB_PASSWORD

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal app logs -r job" will tail logs from the first server in the job section.
#
# aliases:
#   shell: app exec --interactive --reuse "bash"
aliases:
  shell: app exec --interactive --reuse "bash"
  tinker: app exec --interactive --reuse "php artisan tinker"

# Use a different ssh user than root
#
# ssh:
#   user: app

# Use a persistent storage volume.
#
# volumes:
#   - "app_storage:/app/storage"

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
#
# asset_path: /app/public/assets
asset_path: /var/www/html/public/build

# Configure rolling deploys by setting a wait time between batches of restarts.
#
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

# Use accessory services (secrets come from .kamal/secrets).
#
# accessories:
#   db:
#     image: mysql:8.0
#     host: 192.168.0.2
#     port: 3306
#     env:
#       clear:
#         MYSQL_ROOT_HOST: '%'
#       secret:
#         - MYSQL_ROOT_PASSWORD
#     files:
#       - config/mysql/production.cnf:/etc/mysql/my.cnf
#       - db/production.sql:/docker-entrypoint-initdb.d/setup.sql
#     directories:
#       - data:/var/lib/mysql
#   redis:
#     image: valkey/valkey:8
#     host: 192.168.0.2
#     port: 6379
#     directories:
#       - data:/data
accessories:
  db:
    directories:
      - data:/var/lib/mysql
    env:
      clear:
        MYSQL_DATABASE: wave_production
        MYSQL_PASSWORD: <%= ENV['DB_PASSWORD'] %>
        MYSQL_ROOT_PASSWORD: <%= ENV['DB_PASSWORD'] %>
        MYSQL_USER: wave
    host: <%= ENV['SSH_HOST'] %>
    image: mysql:9.3
    options:
      network: private
  db_backup:
    env:
      clear:
        AWS_BUCKET_NAME: wave
        AWS_DEFAULT_REGION: us-east-1
        DB_DUMP_INCLUDE: wave_production
        DB_DUMP_RETENTION: 30d
        DB_DUMP_TARGET: s3://wave/backups/
        DB_NAME: wave_production
        DB_PASS: <%= ENV['DB_PASSWORD'] %>
        DB_RESTORE_TARGET: s3://wave/backups/
        DB_SERVER: wave-db
        DB_USER: wave
        SINGLE_DATABASE: true
      secret:
        - AWS_ACCESS_KEY_ID
        - AWS_SECRET_ACCESS_KEY
    host: <%= ENV['SSH_HOST'] %>
    image: databack/mysql-backup:1.2.2
    options:
      network: private
    volumes:
      - backup-data:/db
  redis:
    directories:
      - redis-data:/data
    host: <%= ENV['SSH_HOST'] %>
    image: valkey/valkey:8.1.1
    options:
      network: private
